# -*- coding: utf-8 -*-
"""Untitled35.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NqtF5-RRh3CPtO67YmerDDgf116aNr2D

Importing Libraries and Data
---
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv('/content/diabetes.csv')
df

"""EDL (Exploratory Data Analysis)"""

df.info()

df.size

df.shape

df.columns

df.describe()

"""Checking The Nulll Values"""

df.isnull().sum()

for col in df.describe():
  print(col)
  print(df[col].unique())
  print('-'*50)

df.plot.box()
plt.xticks(rotation=45)

df['Insulin'].plot(kind='box')

a=df['Insulin'].describe()
b=df['Insulin'].plot(kind='box')
print(a)
print(b)

sns.heatmap(df.isnull())

"""Correlation Matrix"""

df.corr()
sns.heatmap(df.corr())

df.hist(figsize=(10,8))
plt.show()

a=df['Outcome'].value_counts()
a

sns.countplot(data=df,x='Outcome')
plt.xlabel('Outcome')
plt.ylabel('count')
plt.title('outcome distribution')

median=df['BloodPressure'].median()
print('median:',median)
mean=df['BloodPressure'].mean()
print('mean:',mean)

sns.distplot(df['BloodPressure'],bins=20)
plt.show(median)

sns.jointplot(data=df,x='Age',y='BloodPressure',kind='kde')

pd.plotting.scatter_matrix(df,figsize=(20,18))

pd.plotting.parallel_coordinates(df,'Outcome',color='br')
plt.xticks(rotation=45)

"""Training the model with the help of train test split.

importing new libraries.
"""

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

"""Train-test-split"""

x=df.drop('Outcome',axis=1)
y=df['Outcome']
x_test,x_train,y_test,y_train=train_test_split(x,y,test_size=0.25)
x_test,x_train,y_test,y_train

"""Training The Model"""

model=LogisticRegression()
model.fit(x_train,y_train)

"""Making prediction"""

prediction=model.predict(x_test)
prediction

"""After training the model, predictions are made using the test data, which comprises 25%
of the total dataset.
"""

accuracy=accuracy_score(prediction,y_test)
percentage=f'{accuracy:.0%}'
print('accuracy of train-test-model is', accuracy)
print('percentage of train-test-model is', percentage)

"""**Hence Our Train Test Model is Correct upto 76%**"""